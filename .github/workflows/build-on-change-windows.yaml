name: Build framework on Windows

on:
  # execute on every PR made targeting the branches bellow
  pull_request:
    branches:
      - main
    paths: # we only include paths critical for building to avoid unnecessary runs
      - src/**
      - include/**
      - scripts/cmake/**
      - test/**
      - .github/workflows/**
      - doc/**
      - qc_framework/**
      - docker/**

  # execute on every push made targeting the branches bellow
  push:
    branches:
      - main
    paths: # we only include paths critical for building to avoid unnecessary runs
      - src/**
      - include/**
      - scripts/cmake/**
      - test/**
      - .github/workflows/**
      - doc/**
      - qc_framework/**
      - docker/**

  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build-windows:
    runs-on: windows-2022
    env:
      TEST_ENABLED: ${{ github.event_name == 'pull_request' && 'ON' || 'OFF' }}
      WORKING_PATH: "D:\\a"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get CMake
        uses: lukka/get-cmake@latest

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: vcpkg-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json', 'CMakePresets.json') }}

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11

      - name: Build framework
        uses: lukka/run-cmake@v10
        env:
          VCPKG_BINARY_SOURCES: clear;files,${{ github.workspace }}/vcpkg_cache,readwrite
        with:
          configurePreset: vcpkg
          configurePresetAdditionalArgs: "['-DCMAKE_INSTALL_PREFIX=QC-Framework-Out', '-DENABLE_FUNCTIONAL_TESTS=${{ env.TEST_ENABLED }}']"
          buildPreset: vcpkg
          buildPresetAdditionalArgs: "['--config Release']"

      - name: Install framework
        run: |
          cmake --install build

      - name: Archive release binaries
        run: |
          mkdir artifacts
          copy .\build\src\result_pooling\Release\ResultPooling.exe .\artifacts\
          copy .\build\src\report_modules\report_module_text\Release\TextReport.exe .\artifacts\
          copy .\build\src\report_modules\report_module_github_ci\Release\GithubCIReport.exe .\artifacts\
          copy .\build\src\report_modules\report_module_gui\Release\ReportGUI.exe .\artifacts\
        shell: cmd

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qc-framework-executables-windows
          path: artifacts

      - name: Unit test execution
        run: |
          Write-Output "Starting unit tests..."

          ctest --test-dir build -C Release

          Write-Output "All unit tests done."
        shell: pwsh

      - name: Archive test results
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: ${{ github.workspace }}\build\Testing\Temporary\LastTest.log

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Framework test execution
        run: |
          Write-Output "Starting framework tests..."
          Rename-Item -path "build" -NewName "out_build"
          Copy-Item -Path "QC-Framework-Out\bin" -Destination "bin" -Recurse
          Copy-Item -Path "out_build\examples\checker_bundle_example\Release\DemoCheckerBundle.exe" -Destination "bin"
          cd "qc_framework"
          python3 -m pip install poetry
          python3 -m poetry install
          python3 -m poetry run pytest
          Write-Output "All framework tests done."
        shell: pwsh

      - name: Execute checker bundles
        run: |
          $env:ASAM_QC_FRAMEWORK_MANIFEST_DIR="${{ github.workspace }}\.github\workflows\windows-manifest"
          $env:ASAM_QC_FRAMEWORK_INSTALLATION_DIR="${{ github.workspace }}\QC-Framework-Out\bin"

          git config --system core.longpaths true

          pip install -e ${{ github.workspace }}\qc_framework

          mkdir "${{ github.workspace }}\odr_out"
          pip install asam-qc-opendrive
          qc_runtime --config="${{ github.workspace }}\.github\workflows\windows-files\odr_config.xml" --manifest="${{ github.workspace }}\.github\workflows\windows-manifest\framework.json" --working_dir="${{ github.workspace }}\odr_out"
          if (-not (Test-Path "${{ github.workspace }}\odr_out\xodr_bundle_report.xqar")) { Throw "Error: Odr output does not exist." }
          if (-not (Test-Path "${{ github.workspace }}\odr_out\Result.xqar")) { Throw "Error: Odr output does not exist." }
          if (-not (Test-Path "${{ github.workspace }}\odr_out\Report.txt")) { Throw "Error: Odr output does not exist." }

          mkdir "${{ github.workspace }}\osc_out"
          pip install asam-qc-openscenarioxml
          qc_runtime --config="${{ github.workspace }}\.github\workflows\windows-files\osc_config.xml" --manifest="${{ github.workspace }}\.github\workflows\windows-manifest\framework.json" --working_dir="${{ github.workspace }}\osc_out"
          if (-not (Test-Path "${{ github.workspace }}\osc_out\xosc_bundle_report.xqar")) { Throw "Error: Osc output does not exist." }
          if (-not (Test-Path "${{ github.workspace }}\osc_out\Result.xqar")) { Throw "Error: Osc output does not exist." }
          if (-not (Test-Path "${{ github.workspace }}\osc_out\Report.txt")) { Throw "Error: Odr output does not exist." }

          mkdir "${{ github.workspace }}\otx_out"
          pip install asam-qc-otx
          qc_runtime --config="${{ github.workspace }}\.github\workflows\windows-files\otx_config.xml" --manifest="${{ github.workspace }}\.github\workflows\windows-manifest\framework.json" --working_dir="${{ github.workspace }}\otx_out"
          if (-not (Test-Path "${{ github.workspace }}\otx_out\otx_bundle_report.xqar")) { Throw "Error: Otx output does not exist." }
          if (-not (Test-Path "${{ github.workspace }}\otx_out\Result.xqar")) { Throw "Error: Otx output does not exist." }
          if (-not (Test-Path "${{ github.workspace }}\otx_out\Report.txt")) { Throw "Error: Odr output does not exist." }

        shell: pwsh
